# Deploys PCP to JFrog Artifactory
name: Release
on:
  push:
    tags:
      - '*.*.*'
      - '!*alpha'
      - '!*beta'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  qa:
    name: ${{ matrix.platform }}
    if: github.repository == 'performancecopilot/pcp' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # run all PCP builds in containers, because the GitHub Actions images contain
          # different packages than the stock Ubuntu releases
          - {platform: debian10-container,        os: ubuntu-20.04}
          - {platform: debian11-container,        os: ubuntu-20.04}
          - {platform: debian12-container,        os: ubuntu-20.04}
          - {platform: ubuntu1804-container,      os: ubuntu-20.04}
          - {platform: ubuntu2004-container,      os: ubuntu-20.04}
          - {platform: ubuntu2204-container,      os: ubuntu-20.04}
          - {platform: fedora36-container,        os: ubuntu-20.04}
          - {platform: fedora37-container,        os: ubuntu-20.04}
          - {platform: fedora38-container,        os: ubuntu-20.04}
          - {platform: centos6-container,         os: ubuntu-20.04}
          - {platform: centos7-container,         os: ubuntu-20.04}
          - {platform: centos-stream8-container,  os: ubuntu-20.04}
          - {platform: centos-stream9-container,  os: ubuntu-20.04}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Fix local hostname DNS lookup
        run: echo 127.0.1.1 $(hostname --fqdn) $(hostname) | sudo tee -a /etc/hosts

      - name: Setup
        run: |
          python3 -c 'import yaml' || pip3 install pyyaml
          mkdir -p artifacts/build artifacts/test

          build/ci/ci-run.py ${{ matrix.platform }} setup

      - name: Build
        run: build/ci/ci-run.py ${{ matrix.platform }} task build

      - name: Copy build artifacts
        run: build/ci/ci-run.py ${{ matrix.platform }} artifacts build --path artifacts/build

      - name: Publish build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.platform }}
          path: artifacts/build

      - name: Install
        run: build/ci/ci-run.py ${{ matrix.platform }} task install

      - name: Initialize QA
        id: init_qa
        run: build/ci/ci-run.py ${{ matrix.platform }} task init_qa

      - name: QA (sanity group)
        run: build/ci/ci-run.py ${{ matrix.platform }} task qa_sanity

      - name: Copy test results
        # always() is required here to run this step even if the QA step fails
        if: always() && steps.init_qa.outcome == 'success'
        run: build/ci/ci-run.py ${{ matrix.platform }} artifacts test --path artifacts/test

      - name: Publish test results
        if: always() && steps.init_qa.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: test-${{ matrix.platform }}
          path: artifacts/test

  release:
    name: Release on Artifactory
    if: github.repository == 'performancecopilot/pcp' || github.event_name == 'workflow_dispatch'
    needs: qa
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create source tarball
        run: ./Makepkgs --source --nonrpm

      - name: Create release tarballs
        run: |
          mkdir archives; for build in artifacts/build-*; do tar -czvf archives/$(basename $build | sed -E 's/^build-//' | sed -E 's/-container$//').tar.gz -C $build $(find $build -type f ! -name "pcp-testsuite*" ! -name "pcp-*.src.rpm" -printf '%f '); done

      - name: Release tarballs on github
        uses: softprops/action-gh-release@v1
        with:
          files: |
            archives/*
            build/tar/*.src.tar.gz

      - name: Release on Artifactory
        run: |
          export PYTHONUNBUFFERED=1
          . VERSION.pcp
          build/ci/artifactory.py deploy \
            --maturity release \
            --version "$PACKAGE_MAJOR.$PACKAGE_MINOR.$PACKAGE_REVISION" \
            --build_name "${GITHUB_WORKFLOW}" \
            --build_number "${GITHUB_RUN_ID}" \
            --source build/tar/*.src.tar.gz \
            --exclude 'pcp-testsuite.*' \
            --exclude 'pcp-.+\.src\.rpm' \
            artifacts/build-*
        env:
          ARTIFACTORY_USER: github-actions
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
          ARTIFACTORY_GPG_PASSPHRASE: ${{ secrets.ARTIFACTORY_GPG_PASSPHRASE }}
